///////////////////////////////////////////////////////////////////////////////
//*****************************************************************************
//
// Camera implementation.
//
//*****************************************************************************
///////////////////////////////////////////////////////////////////////////////

// Internal implementation of Camera
struct CameraImpl
{
  //
  // Behavior setup
  //
  /// Linear acceleration of the camera movement when snapping to the target (0 for instant snap)
  float      TargettingAcceleration;
  
  //
  // Targets.
  //
  /// Use built-in viewport control (target on player)
  bool       DefaultTarget;
  /// Target character, or null
  Character *TargetCharacter;
  /// Target room object, or null
  Object    *TargetObject;
  /// Target location, or null
  Point     *TargetLocation;
  /// Static target coordinates
  bool       StaticTarget;
            
  /// Camera zoom, in percents to default (eq. native game size)
  float      Zoom;
  
  //
  // State
  //
  
  /// Camera half-width and half-height
  float      Width2;
  float      Height2;
  /// Camera movement limits
  float      X1, X2, Y1, Y2;
  /// Current camera's center point
  float      CameraX;
  float      CameraY;
  /// Actual dynamic target coords
  bool       LockedToTarget;
  float      TargetX;
  float      TargetY;
  float      OldTargetX;
  float      OldTargetY;
  /// Immediate pan-to destination (may be set from target, or else)
  float      PanToX;
  float      PanToY;
  /// Current movement speed
  float      SpeedX;
  float      SpeedY;
  
  /// Reset all target properties
  import void ResetTarget();
  /// Reset movement parameters
  import void ResetMovement();
  /// Reset all properties to defaults
  import void ResetAll();
  /// Reinitialize room-related properties (camera bounds, etc)
  import void OnRoomInit();
  /// Update camera actions and position
  import void Update();
  
  /// Take control over viewport
  import void TakeControl();
  /// Give control back to AGS
  import void ReleaseControl();
  /// Assign camera position from viewport
  import void SetFromViewport();
  /// Assign viewport from camera position
  import void UpdateViewport();
  /// Make sure that camera stays in bounds; returns TRUE if position was adjusted
  import bool ImposeBounds();
  
  /// Set new camera position
  import void SetTo(int x, int y);
  import void SetToF(float x, float y);
  /// Set new camera position, using viewport coordinates
  import void SetViewportTo(int x, int y);
  
  /// Update target's position; returns TRUE if any target exists
  import bool UpdateTarget();
  /// Perform actual moving towards given coordinates, using given
  /// linear acceleration
  import bool DoMove(float x, float y, float accel);
};

/// Rectangular overlay control, works as placeholder for zooming;
/// helps debug zooming commands
struct ZoomPlaceholder
{
  protected DynamicSprite *Rect;
  protected Overlay *O;
  protected float Width2;
  protected float Height2;
  
  import void Create(float perc);
  import void Remove();
  import void Update();
};


CameraImpl      CameraData;
ZoomPlaceholder ZoomDebug;


//=============================================================================
//
// CameraImpl::UpdateViewport()
//
//=============================================================================
void CameraImpl::UpdateViewport()
{
  SetViewport(FloatToInt(this.CameraX - this.Width2, eRoundNearest), FloatToInt(this.CameraY - this.Height2, eRoundNearest));
}

//=============================================================================
//
// CameraImpl::ImposeBounds()
//
// Returns TRUE if the position was adjusted.
//
// TODO: maybe implement Maths.Clamp
//
//=============================================================================
bool CameraImpl::ImposeBounds()
{
  float limx = this.CameraX;
  float limy = this.CameraY;
  if (this.CameraX < this.X1)
    limx = this.X1;
  else if (this.CameraX > this.X2)
    limx = this.X2;
  if (this.CameraY < this.Y1)
    limy = this.Y1;
  else if (this.CameraY > this.Y2)
    limy = this.Y2;

  bool was_adj = false;
  if (limx != this.CameraX || limy != this.CameraY){
    this.CameraX = limx;
    this.CameraY = limy;
    was_adj = true;
  }
  this.UpdateViewport();
  return was_adj;
}

//=============================================================================
//
// CameraImpl::SetFromViewport()
//
//=============================================================================
void CameraImpl::SetFromViewport()
{
  this.CameraX = IntToFloat(GetViewportX()) + this.Width2;
  this.CameraY = IntToFloat(GetViewportY()) + this.Height2;
  this.ImposeBounds();
}

//=============================================================================
//
// CameraImpl::TakeControl()
//
//=============================================================================
void CameraImpl::TakeControl()
{
  // update camera from viewport and lock viewport
  CameraData.SetFromViewport();
  SetViewport(GetViewportX(), GetViewportY());
}

//=============================================================================
//
// CameraImpl::ReleaseControl()
//
//=============================================================================
void CameraImpl::ReleaseControl()
{
  // unlock viewport, let AGS control it
  ReleaseViewport();
}

//=============================================================================
//
// CameraImpl::ResetTarget()
//
//=============================================================================
void CameraImpl::ResetTarget()
{
  this.DefaultTarget = false;
  this.TargetCharacter = null;
  this.TargetObject = null;
  this.TargetLocation = null;
  this.StaticTarget = false;
  this.LockedToTarget = false;
  this.TargetX = -1.0;
  this.TargetY = -1.0;
  this.OldTargetX = -1.0;
  this.OldTargetY = -1.0;
}

//=============================================================================
//
// CameraImpl::ResetMovement()
//
//=============================================================================
void CameraImpl::ResetMovement()
{
  this.OldTargetX = -1.0;
  this.OldTargetY = -1.0;
  this.SpeedX = 0.0;
  this.SpeedY = 0.0;
}

//=============================================================================
//
// CameraImpl::ResetAll()
//
//=============================================================================
void CameraImpl::ResetAll()
{
  this.Width2 = 0.0;
  this.Height2 = 0.0;
  this.X1 = 0.0;
  this.X2 = 0.0;
  this.Y1 = 0.0;
  this.Y2 = 0.0;
  this.Zoom = 100.0;
  
  this.ResetTarget();
  this.ResetMovement();
  
  this.TargettingAcceleration = 0.0;

  this.CameraX = -1.0;
  this.CameraY = -1.0;
}

//=============================================================================
//
// CameraImpl::OnRoomInit()
//
//=============================================================================
void CameraImpl::OnRoomInit()
{
  this.Width2 = IntToFloat(System.ViewportWidth) / 2.0;
  this.Height2 = IntToFloat(System.ViewportHeight) / 2.0;
  this.X1 = 0.0;
  this.X2 = IntToFloat(Room.Width);
  this.Y1 = 0.0;
  this.Y2 = IntToFloat(Room.Height);
  
  this.ResetMovement();
}

//=============================================================================
//
// CameraImpl::SetTo()
//
//=============================================================================
void CameraImpl::SetTo(int x, int y)
{
  this.CameraX = IntToFloat(x);
  this.CameraY = IntToFloat(y);
  this.ImposeBounds();
}

//=============================================================================
//
// CameraImpl::SetToF()
//
//=============================================================================
void CameraImpl::SetToF(float x, float y)
{
  this.CameraX = x;
  this.CameraY = y;
  this.ImposeBounds();
}

//=============================================================================
//
// CameraImpl::SetViewportTo()
//
// TODO: simplify/optimize this a bit, there is a ImposeBounds call inside
// SetFromViewport that also may do SetViewport.
//
//=============================================================================
void CameraImpl::SetViewportTo(int x, int y)
{
  SetViewport(x, y);
  this.SetFromViewport();
}

//=============================================================================
//
// CameraImpl::DoMove()
//
//=============================================================================
bool CameraImpl::DoMove(float x, float y, float accel)
{
  // Check if the target is in the snap range
  float dist = Maths.Sqrt(Maths.RaiseToPower(x - this.CameraX, 2.0) + Maths.RaiseToPower(y - this.CameraY, 2.0));
  if (dist <= TINY_FLOAT){
    // So close, quick-snap
    this.CameraX = x;
    this.CameraY = y;
  }
  else{
    // Accelerate and move towards target
    // TODO: proper vector logic here
    float dirx = 1.0;
    float diry = 1.0;
    if (this.TargetX < this.CameraX)
      dirx = -1.0;
    if (this.TargetY < this.CameraY)
      diry = -1.0;
      
    // If direction changed suddenly then reset speed
    if (this.SpeedX < 0.0 && dirx >= 0.0 || this.SpeedX > 0.0 && dirx < 0.0)
      this.SpeedX = 0.0;
    if (this.SpeedY < 0.0 && diry >= 0.0 || this.SpeedY > 0.0 && diry < 0.0)
      this.SpeedY = 0.0;
    
    // Do camera movement
    if (accel > 0.0){
      this.SpeedX += accel * dirx;
      this.SpeedY += accel * diry;
    }

    // Do not let the camera fly over the target
    if (dirx >= 0.0 && this.CameraX + this.SpeedX > x ||
        dirx <= 0.0 && this.CameraX + this.SpeedX < x)
      this.CameraX = x;
    else
      this.CameraX += this.SpeedX;
    if (diry >= 0.0 && this.CameraY + this.SpeedY > y ||
        diry <= 0.0 && this.CameraY + this.SpeedY < y)
      this.CameraY = y;
    else
      this.CameraY += this.SpeedY;
  }
  
  // Make sure camera stays in limits
  return this.ImposeBounds();
}

//=============================================================================
//
// CameraImpl::UpdateTarget()
//
//=============================================================================
bool CameraImpl::UpdateTarget()
{
  // TODO: calculate middle point
  if (this.TargetCharacter != null){
    this.TargetX = IntToFloat(this.TargetCharacter.x);
    this.TargetY = IntToFloat(this.TargetCharacter.y);
  }
  else if (this.TargetObject != null){
    this.TargetX = IntToFloat(this.TargetObject.X);
    this.TargetY = IntToFloat(this.TargetObject.Y);
  }
  else if (this.TargetLocation != null){
    this.TargetX = IntToFloat(this.TargetLocation.x);
    this.TargetY = IntToFloat(this.TargetLocation.y);
  }
  else if (!this.StaticTarget)
    return false; // no target
  // If this.StaticTarget, then TargetX/Y are already set to StaticX/Y
  return true;
}

//=============================================================================
//
// CameraImpl::Update()
//
//=============================================================================
void CameraImpl::Update()
{
  // Update current dynamic target location
  if (!this.UpdateTarget())
    return;
  
  if (!this.LockedToTarget){
    // do nothing else, duh
    this.OldTargetX = this.TargetX;
    this.OldTargetY = this.TargetY;
    return;
  }
  
  bool snapped = this.CameraX == this.OldTargetX && this.CameraY == this.OldTargetY;
  if (snapped){
    // Already snapped to target
    this.SetToF(this.TargetX, this.TargetY);
  }
  else if (this.TargettingAcceleration <= TINY_FLOAT){
    // No acceleration, directly snap to the target
    this.SetToF(this.TargetX, this.TargetY);
  }
  else{
    this.DoMove(this.TargetX, this.TargetY, this.TargettingAcceleration);
  }

  this.OldTargetX = this.TargetX;
  this.OldTargetY = this.TargetY;
}

//=============================================================================
//
// ZoomPlaceholder::Remove()
//
//=============================================================================
void ZoomPlaceholder::Remove()
{
  if (this.O != null && this.O.Valid)
    this.O.Remove();
  this.O = null;
  if (this.Rect != null)
    this.Rect.Delete();
  this.Rect = null;
}

//=============================================================================
//
// ZoomPlaceholder::Create()
//
//=============================================================================
void ZoomPlaceholder::Create(float perc)
{
  this.Remove();
  
  float sys_w = IntToFloat(System.ViewportWidth);
  float sys_h = IntToFloat(System.ViewportHeight);
  this.Width2 = (sys_w * perc / 100.0) / 2.0;
  float w = sys_w * perc / 100.0;
  float h = sys_h * perc / 100.0;
  this.Width2 = w / 2.0;
  this.Height2 = h / 2.0;
  float x = CameraData.CameraX - this.Width2;
  float y = CameraData.CameraY - this.Height2;
  this.Rect = DynamicSprite.Create(FloatToInt(w), FloatToInt(h), false);
  DrawingSurface *ds = this.Rect.GetDrawingSurface();
  ds.Clear();
  ds.DrawingColor = Game.GetColorFromRGB(0, 50, 200);
  ds.DrawFrame(0, 0, ds.Width - 1, ds.Height - 1);
  ds.DrawString(2, 2, eFontFont0, String.Format("Zoom: %0.1f%%", perc));
  ds.Release();
  this.O = Overlay.CreateGraphical(FloatToInt(x, eRoundNearest) - GetViewportX(),
                                   FloatToInt(y, eRoundNearest) - GetViewportY(),
                                   this.Rect.Graphic, true);
}

//=============================================================================
//
// ZoomPlaceholder::Update()
//
//=============================================================================
void ZoomPlaceholder::Update()
{
  if (this.O == null || !this.O.Valid)
    return;
  float x = CameraData.CameraX - this.Width2;
  float y = CameraData.CameraY - this.Height2;
  this.O.X = FloatToInt(x, eRoundNearest) - GetViewportX();
  this.O.Y = FloatToInt(y, eRoundNearest) - GetViewportY();
}

//=============================================================================
//
// CameraEx::TargettingAcceleration property
//
//=============================================================================
float get_TargettingAcceleration(static CameraEx)
{
  return CameraData.TargettingAcceleration;
}

void set_TargettingAcceleration(static CameraEx, float f)
{
  CameraData.TargettingAcceleration = f;
}

//=============================================================================
//
// CameraEx::DefaultTarget property
//
//=============================================================================
bool get_DefaultTarget(static CameraEx)
{
  return CameraData.DefaultTarget;
}

void set_DefaultTarget(static CameraEx, bool on)
{
  if (on){
    CameraData.ResetTarget();
    CameraData.LockedToTarget = true;
    CameraData.ReleaseControl(); // give control to AGS
  }
  else if (CameraData.DefaultTarget){
    CameraData.TakeControl(); // take control from AGS
  }
  CameraData.DefaultTarget = on;
}

//=============================================================================
//
// CameraEx::TargetCharacter property
//
//=============================================================================
Character *get_TargetCharacter(static CameraEx)
{
  return CameraData.TargetCharacter;
}

void set_TargetCharacter(static CameraEx, Character *c)
{
  if (c == null && CameraData.DefaultTarget)
    return;
  CameraData.TakeControl();
  CameraData.ResetTarget();
  CameraData.LockedToTarget = true;
  CameraData.TargetCharacter = c;
}

//=============================================================================
//
// CameraEx::TargetObject property
//
//=============================================================================
Object *get_TargetObject(static CameraEx)
{
  return CameraData.TargetObject;
}

void set_TargetObject(static CameraEx, Object *o)
{
  if (o == null && CameraData.DefaultTarget)
    return;
  CameraData.TakeControl();
  CameraData.ResetTarget();
  CameraData.LockedToTarget = true;
  CameraData.TargetObject = o;
}

//=============================================================================
//
// CameraEx::TargetLocation property
//
//=============================================================================
Point *get_TargetLocation(static CameraEx)
{
  return CameraData.TargetLocation;
}

void set_TargetLocation(static CameraEx, Point *p)
{
  if (p == null && CameraData.DefaultTarget)
    return;
  CameraData.TakeControl();
  CameraData.ResetTarget();
  CameraData.LockedToTarget = true;
  CameraData.TargetLocation = p;
}

//=============================================================================
//
// CameraEx::SetStaticTarget()
//
//=============================================================================
static void CameraEx::SetStaticTarget(int x, int y)
{
  CameraData.ResetTarget();
  CameraData.LockedToTarget = true;
  CameraData.StaticTarget = true;
  CameraData.TargetX = IntToFloat(x);
  CameraData.TargetY = IntToFloat(y);
}

//=============================================================================
//
// CameraEx::StaticTarget readonly property
//
//=============================================================================
bool get_StaticTarget(static CameraEx)
{
  return CameraData.LockedToTarget;
}

//=============================================================================
//
// CameraEx::SetBounds()
//
// TODO: implement Maths.Clamp()
//
//=============================================================================
static void CameraEx::SetBounds(int x1, int y1, int x2, int y2)
{
  if (x1 > x2)
  {
    int a = x1;
    x1 = x2;
    x2 = a;
  }
  if (y1 > y2)
  {
    int a = y1;
    y1 = y2;
    y2 = a;
  }

  if (x1 < 0)
    x1 = 0;
  else if (x1 > Room.Width)
    x1 = Room.Width;
  if (x2 < 0)
    x2 = 0;
  else if (x2 > Room.Width)
    x2 = Room.Width;

  if (y1 < 0)
    y1 = 0;
  else if (y1 > Room.Height)
    y1 = Room.Height;
  if (y2 < 0)
    y2 = 0;
  else if (y2 > Room.Height)
    y2 = Room.Height;

  CameraData.X1 = IntToFloat(x1);
  CameraData.X2 = IntToFloat(x2);
  CameraData.Y1 = IntToFloat(y1);
  CameraData.Y2 = IntToFloat(y2);
  CameraData.ImposeBounds();
}

//=============================================================================
//
// CameraEx::ResetBounds()
//
//=============================================================================
static void CameraEx::ResetBounds()
{
  CameraData.X1 = 0.0;
  CameraData.X2 = IntToFloat(Room.Width);
  CameraData.Y1 = 0.0;
  CameraData.Y2 = IntToFloat(Room.Height);
  CameraData.ImposeBounds();
}

//=============================================================================
//
// CameraEx::Lock()
//
//=============================================================================
static void CameraEx::Lock()
{
  CameraData.LockedToTarget = true;
  if (CameraData.DefaultTarget)
    CameraData.ReleaseControl(); // enable built-in AGS targetting
}

//=============================================================================
//
// CameraEx::Release()
//
//=============================================================================
static void CameraEx::Release()
{
  CameraData.LockedToTarget = false;
  if (CameraData.DefaultTarget)
    CameraData.TakeControl(); // override built-in AGS targetting
}

//=============================================================================
//
// CameraEx::Snap()
//
//=============================================================================
static void CameraEx::Snap()
{
  if (CameraData.LockedToTarget){
    CameraData.UpdateTarget();
    CameraData.SetToF(CameraData.TargetX, CameraData.TargetY);
    CameraData.OldTargetX = CameraData.TargetX;
    CameraData.OldTargetY = CameraData.TargetY;
  }
}

//=============================================================================
//
// CameraEx::PointTo()
//
//=============================================================================
static void CameraEx::CenterAt(int x, int y)
{
  CameraData.SetTo(x, y);
  if (!CameraData.LockedToTarget && CameraData.DefaultTarget)
    CameraData.ReleaseControl();
}

//=============================================================================
//
// CameraEx::SetAt()
//
//=============================================================================
static void CameraEx::ViewportAt(int x, int y)
{
  CameraData.SetViewportTo(x, y);
  if (!CameraData.LockedToTarget && CameraData.DefaultTarget)
    CameraData.ReleaseControl();
}

//=============================================================================
//
// CameraEx::Zoom property
//
//=============================================================================
float get_Zoom(static CameraEx)
{
  return CameraData.Zoom;
}

void set_Zoom(static CameraEx, float f)
{
  CameraData.Zoom = f;
  if (CameraData.Zoom == 100.0)
    ZoomDebug.Remove();
  else
    ZoomDebug.Create(f);
}

//=============================================================================
//
// CameraEx::CameraX readonly property
//
//=============================================================================
int get_CameraX(static CameraEx)
{
  return FloatToInt(CameraData.CameraX, eRoundNearest);
}

//=============================================================================
//
// CameraEx::CameraY readonly property
//
//=============================================================================
int get_CameraY(static CameraEx)
{
  return FloatToInt(CameraData.CameraY, eRoundNearest);
}

//=============================================================================
//
// CameraEx::CameraWidth readonly property
//
//=============================================================================
int get_CameraWidth(static CameraEx)
{
  return FloatToInt(CameraData.Width2, eRoundNearest) * 2;
}

//=============================================================================
//
// CameraEx::CameraHeight readonly property
//
//=============================================================================
int get_CameraHeight(static CameraEx)
{
  return FloatToInt(CameraData.Height2, eRoundNearest) * 2;
}

//=============================================================================
//
// CameraEx::LockedToTarget readonly property
//
//=============================================================================
bool get_LockedToTarget(static CameraEx)
{
  return CameraData.LockedToTarget;
}

//=============================================================================
//
// CameraEx::TargetX readonly property
//
//=============================================================================
int get_TargetX(static CameraEx)
{
  return FloatToInt(CameraData.TargetX, eRoundNearest);
}

//=============================================================================
//
// CameraEx::TargetY readonly property
//
//=============================================================================
int get_TargetY(static CameraEx)
{
  return FloatToInt(CameraData.TargetY, eRoundNearest);
}


///////////////////////////////////////////////////////////////////////////////
//*****************************************************************************
//
// FreeLook implementation.
//
//*****************************************************************************
///////////////////////////////////////////////////////////////////////////////

struct FreeLookImpl
{
  bool On;
  
  import void Reset();
  import void Update();
};

FreeLookImpl FreeLookData;

//=============================================================================
//
// FreeLookImpl::Reset()
//
//=============================================================================
void FreeLookImpl::Reset()
{
  this.On = false;
}

//=============================================================================
//
// FreeLookImpl::Update()
//
// TODO: delegate actual moves to Camera.
//
//=============================================================================
void FreeLookImpl::Update()
{
  int x = GetViewportX(), y = GetViewportY();
  int w = System.ViewportWidth, h = System.ViewportHeight;
  int x1 = 100, x2 = System.ViewportWidth - 100;
  int y1 = 75, y2 = System.ViewportHeight - 75;
  if(mouse.x > x2){
    x+=((mouse.x-x2)/4);
    if((x+w)>Room.Width) x = Room.Width-w;
  }
  else if(mouse.x < x1){
    x-=((x1-mouse.x)/4);
    if(x<0) x = 0;
  }
  if(mouse.y > y2){
    y+=((mouse.y-y2)/3);
    if((y+h)>Room.Height) y = Room.Height-h;
  }
  else if(mouse.y < y1){
    y-=((y1-mouse.y)/3);
    if(y<0) y = 0;
  }
  SetViewport(x, y);
}

//=============================================================================
//
// FreeLook::Enabled property
//
//=============================================================================
bool get_Enabled(static FreeLook)
{
  return FreeLookData.On;
}

void set_Enabled(static FreeLook, bool on)
{
  if (on == FreeLookData.On)
    return;
  if (on)
    CameraEx.Release();
  else
    CameraEx.Lock();
  FreeLookData.On = on;
}


///////////////////////////////////////////////////////////////////////////////
//*****************************************************************************
//
// CameraAction implementation.
//
//*****************************************************************************
///////////////////////////////////////////////////////////////////////////////

struct CameraActionImpl
{
  bool Do;
  float PanToX;
  float PanToY;
  float Accel;
  
  import void Reset();
  import void Update();
};

CameraActionImpl CameraActionData;

//=============================================================================
//
// CameraActionImpl::Reset()
//
//=============================================================================
void CameraActionImpl::Reset()
{
  this.Do = false;
  this.PanToX = -1.0;
  this.PanToY = -1.0;
  this.Accel = 0.0;
}

//=============================================================================
//
// CameraActionImpl::Update()
//
// TODO: find a way to merge this with camera update(?).
//
//=============================================================================
void CameraActionImpl::Update()
{
  bool canmove = CameraData.DoMove(this.PanToX, this.PanToY, this.Accel);
  
  if (!canmove || CameraData.CameraX == this.PanToX && CameraData.CameraY == this.PanToY)
    this.Do = false;
}

//=============================================================================
//
// CameraAction::MoveTo()
//
//=============================================================================
static void CameraAction::Pos(int x, int y)
{
  CameraEx.Release(); // stop following target
  CameraData.SetTo(x, y);
}

//=============================================================================
//
// CameraAction::PanTo()
//
//=============================================================================
static void CameraAction::Pan(int x, int y, float speed, float accel, BlockingStyle block)
{
  CameraEx.Release(); // stop following target
  CameraActionData.Do = true;
  CameraActionData.PanToX = IntToFloat(x);
  CameraActionData.PanToY = IntToFloat(y);
  CameraActionData.Accel = accel;
  
  // Set initial camera speed
  // TODO: proper vector logic here
  if (CameraActionData.PanToX >= CameraData.CameraX)
    CameraData.SpeedX = speed;
  else
    CameraData.SpeedX = -speed;
  if (CameraActionData.PanToY >= CameraData.CameraY)
    CameraData.SpeedY = speed;
  else
    CameraData.SpeedY = -speed;
  
  if (block == eBlock){
    while (CameraActionData.Do){
      // NOTE: update is called in late_repexec_always, so it
      // will be run while we are waiting here
      Wait(1);
    }
  }
}

//=============================================================================
//
// CameraAction::LinearZoomOnto()
//
//=============================================================================
static void CameraAction::LinearZoomOnto(int x, int y, float next_zoom, float reach_at_zoom)
{
  CameraEx.Release(); // stop following target
  
  // What we have here, is a linear dependency between zoom and position
  // The point of CameraData.Zoom:
  float at_xf   = CameraData.CameraX;
  float at_yf   = CameraData.CameraY;
  // The point of reach_at_zoom:
  float end_xf  = IntToFloat(x);
  float end_yf  = IntToFloat(y);
  
  // Distance between current and end point
  float dist_x = end_xf - at_xf;
  float dist_y = end_yf - at_yf;
  // Distance between current and end zoom
  float dist_z = reach_at_zoom - CameraData.Zoom;
  // Distance between current and next zoom
  float step_z = next_zoom - CameraData.Zoom;
  
  // And the point of next_zoom is...
  float xf     = at_xf + dist_x * step_z / dist_z;
  float yf     = at_yf + dist_y * step_z / dist_z;

  CameraData.SetToF(xf, yf);
  CameraEx.set_Zoom(next_zoom);
}

///////////////////////////////////////////////////////////////////////////////
//*****************************************************************************
//
// Engine callbacks
//
//*****************************************************************************
///////////////////////////////////////////////////////////////////////////////

//=============================================================================
//
// game_start()
//
//=============================================================================
function game_start()
{
  // Reset camera
  CameraData.ResetAll();
  CameraData.DefaultTarget = true;
  // Reset various helpers
  FreeLookData.Reset();
  CameraActionData.Reset();
}

//=============================================================================
//
// late_repeatedly_execute_always()
// Runs every game cycle after game updates but before it redraws itself.
//
//=============================================================================
function late_repeatedly_execute_always()
{
  // FIXME -- temp hack
  if (IsGamePaused())
    return;

  if (!CameraData.DefaultTarget)
    CameraData.Update();
  if (FreeLookData.On)
    FreeLookData.Update();
  if (CameraActionData.Do)
    CameraActionData.Update();
  if (CameraData.Zoom != 100.0)
    ZoomDebug.Update();
}

//=============================================================================
//
// on_event()
//
//=============================================================================
function on_event(EventType event, int data)
{
  if (event == eEventEnterRoomBeforeFadein){
    // Initialize camera movement limits
    CameraData.OnRoomInit();
    // Snap to player upon entering new room
    CameraEx.set_TargetCharacter(player);
    CameraEx.Snap();
  }
}
